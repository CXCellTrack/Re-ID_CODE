function [vars, ADN] = GMMCP(Kval, n_person_in_seq)
 
% 实现下面这篇文章的demo
% GMMCP Tracker: Globally Optimal Generalized Maximum Multi Clique Problem for Multiple Object Tracking

%% 2、加入聚合哑节点（ADN）（在后面直接intvar即可）
n_nodes = n_person_in_seq; % 每个cluster中的节点数目

% 每个cluster中加入Aggregated Dummy Nodes (ADN)
% 其值为整数，这样减少了变量的数目
% ADN的加入在建立整数规划的时候再体现!

%% 3、计算边的权值
h_c = size(Kval,1); % h_c 为cluster的个数
weight = Kval;

% 注意在非speedup版本中，连接到dummy node的权值为Cd（将其设为0）
% 在speedup版本中，ADN不是边变量，而是节点变量，节点权值为Cd/2（不妨设为0.01）
Cd = 0.01;

%% 4、计算约束条件
vars = cell(h_c);
for i1=1:h_c-1 % 分配变量，每个变量对应一个权值
    for i2=i1+1:h_c % vars指的是边的变量（0、1代表是否连接上），论文中还有节点变量Vij，似乎不参与运作
        vars{i1,i2} = binvar(n_nodes(i1), n_nodes(i2), 'full'); 
        vars{i2,i1} = vars{i1,i2}'; % 镜像复制
    end
end 
% 分配 ADN 整型变量
ADN = intvar(1,h_c,'full');

% 计算约束条件1（对于每个cluster i，进来的边的个数+ADN(i)的个数 = (h-1)*K），
% K为希望生成的clique的个数)
F1 = [];
for i=1:h_c
    sum_in = 0;
    for j=1:h_c
        sum_in = sum_in + sum(sum(vars{i,j}));
    end
    F1 = [F1, sum_in + ADN(i) == (h_c-1)*max(n_nodes)];
end
        
% 计算约束条件2（任意一个节点的有效边为h-1个，h为cluster个数）在ADN版本中，改为<=1
F2 = [];
for i1=1:h_c-1 % weight 为上三角阵
    for i2=i1+1:h_c
        for j1=1:n_nodes(i1)
            F2 = [F2, sum(vars{i1,i2}(j1,:))<=1]; % i1中的j1至多连接到i2中的某一个
        end
        for j2=1:n_nodes(i2)
            F2 = [F2, sum(vars{i1,i2}(:,j2))<=1]; % i2中的j2至多连接到i1中的某一个
        end
    end
end

% 计算约束条件3（点a与点b连，点b与点c连，则a要与c连）
F3 = [];
tic
for i1=1:h_c-1 % 非常非常非常慢 eij的总数目为 h*(h-1)/2*K^2 在这里为 6*14^2 = 1176
    for i2=i1+1:h_c % 每3个变量之间就有3个约束3，因此约束3条数为: Ch_2*(h-2)*K^3 = 6*2*14^3 = 32928
        for i3=1:h_c % i1和i2交换位置，其实是同一条约束（因此不妨规定i2>i1）
            % 三个cluter必须不相同
            if i1==i2 || i2==i3 || i3==i1
                continue;
            end
            fprintf('计算 %d ― %d ― %d 的约束...\n', i1,i2,i3);
            for j1=1:n_nodes(i1)
                for j2=1:n_nodes(i2)
                    for j3=1:n_nodes(i3)
                    	F3 = [F3, vars{i1,i2}(j1,j2)+vars{i2,i3}(j2,j3)<=1+vars{i1,i3}(j1,j3)];
                    end
                end
            end
        end
    end
end
toc

%% 5、计算目标函数并进行求解
F = [F1, F2, F3];
OBJ = 0;
for i1=1:h_c-1
    for i2=i1+1:h_c
        OBJ = OBJ + sum(sum( vars{i1,i2}.*weight{i1,i2} ));
    end
end
OBJ = OBJ + Cd/2*sum(ADN); % 把ADN的值*权重也算上

% 求解BILP
disp('开始求解整数混合规划...')
options = sdpsettings('verbose',0,'solver','gurobi');
sol = solvesdp( F, -OBJ, options )
for i1=1:h_c-1
    for i2=i1+1:h_c
        vars{i1,i2} = value(vars{i1,i2});
        vars{i2,i1} = vars{i1,i2}';
    end
end

ADN = value(ADN);





